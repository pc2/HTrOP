// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hds.proto

#ifndef PROTOBUF_hds_2eproto__INCLUDED
#define PROTOBUF_hds_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2007000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace HTROP_PB {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_hds_2eproto();
void protobuf_AssignDesc_hds_2eproto();
void protobuf_ShutdownFile_hds_2eproto();

class BinaryData;
class LLVM_IR_Req;
class Message_RCRS;
class Message_RCRS_ScopInfo;
class Message_RSRC;
class Message_RSRC_ScopFunctionOCLInfo;

// ===================================================================

class LLVM_IR_Req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HTROP_PB.LLVM_IR_Req) */ {
 public:
  LLVM_IR_Req();
  virtual ~LLVM_IR_Req();

  LLVM_IR_Req(const LLVM_IR_Req& from);

  inline LLVM_IR_Req& operator=(const LLVM_IR_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LLVM_IR_Req& default_instance();

  void Swap(LLVM_IR_Req* other);

  // implements Message ----------------------------------------------

  inline LLVM_IR_Req* New() const { return New(NULL); }

  LLVM_IR_Req* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LLVM_IR_Req& from);
  void MergeFrom(const LLVM_IR_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LLVM_IR_Req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:HTROP_PB.LLVM_IR_Req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_hds_2eproto();
  friend void protobuf_AssignDesc_hds_2eproto();
  friend void protobuf_ShutdownFile_hds_2eproto();

  void InitAsDefaultInstance();
  static LLVM_IR_Req* default_instance_;
};
// -------------------------------------------------------------------

class BinaryData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HTROP_PB.BinaryData) */ {
 public:
  BinaryData();
  virtual ~BinaryData();

  BinaryData(const BinaryData& from);

  inline BinaryData& operator=(const BinaryData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BinaryData& default_instance();

  void Swap(BinaryData* other);

  // implements Message ----------------------------------------------

  inline BinaryData* New() const { return New(NULL); }

  BinaryData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BinaryData& from);
  void MergeFrom(const BinaryData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BinaryData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes binary_data = 1;
  bool has_binary_data() const;
  void clear_binary_data();
  static const int kBinaryDataFieldNumber = 1;
  const ::std::string& binary_data() const;
  void set_binary_data(const ::std::string& value);
  void set_binary_data(const char* value);
  void set_binary_data(const void* value, size_t size);
  ::std::string* mutable_binary_data();
  ::std::string* release_binary_data();
  void set_allocated_binary_data(::std::string* binary_data);

  // @@protoc_insertion_point(class_scope:HTROP_PB.BinaryData)
 private:
  inline void set_has_binary_data();
  inline void clear_has_binary_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr binary_data_;
  friend void  protobuf_AddDesc_hds_2eproto();
  friend void protobuf_AssignDesc_hds_2eproto();
  friend void protobuf_ShutdownFile_hds_2eproto();

  void InitAsDefaultInstance();
  static BinaryData* default_instance_;
};
// -------------------------------------------------------------------

class Message_RCRS_ScopInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HTROP_PB.Message_RCRS.ScopInfo) */ {
 public:
  Message_RCRS_ScopInfo();
  virtual ~Message_RCRS_ScopInfo();

  Message_RCRS_ScopInfo(const Message_RCRS_ScopInfo& from);

  inline Message_RCRS_ScopInfo& operator=(const Message_RCRS_ScopInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message_RCRS_ScopInfo& default_instance();

  void Swap(Message_RCRS_ScopInfo* other);

  // implements Message ----------------------------------------------

  inline Message_RCRS_ScopInfo* New() const { return New(NULL); }

  Message_RCRS_ScopInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message_RCRS_ScopInfo& from);
  void MergeFrom(const Message_RCRS_ScopInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Message_RCRS_ScopInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string scopFunctionName = 1;
  bool has_scopfunctionname() const;
  void clear_scopfunctionname();
  static const int kScopFunctionNameFieldNumber = 1;
  const ::std::string& scopfunctionname() const;
  void set_scopfunctionname(const ::std::string& value);
  void set_scopfunctionname(const char* value);
  void set_scopfunctionname(const char* value, size_t size);
  ::std::string* mutable_scopfunctionname();
  ::std::string* release_scopfunctionname();
  void set_allocated_scopfunctionname(::std::string* scopfunctionname);

  // optional uint32 max_codegen_loop_depth = 2;
  bool has_max_codegen_loop_depth() const;
  void clear_max_codegen_loop_depth();
  static const int kMaxCodegenLoopDepthFieldNumber = 2;
  ::google::protobuf::uint32 max_codegen_loop_depth() const;
  void set_max_codegen_loop_depth(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:HTROP_PB.Message_RCRS.ScopInfo)
 private:
  inline void set_has_scopfunctionname();
  inline void clear_has_scopfunctionname();
  inline void set_has_max_codegen_loop_depth();
  inline void clear_has_max_codegen_loop_depth();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr scopfunctionname_;
  ::google::protobuf::uint32 max_codegen_loop_depth_;
  friend void  protobuf_AddDesc_hds_2eproto();
  friend void protobuf_AssignDesc_hds_2eproto();
  friend void protobuf_ShutdownFile_hds_2eproto();

  void InitAsDefaultInstance();
  static Message_RCRS_ScopInfo* default_instance_;
};
// -------------------------------------------------------------------

class Message_RCRS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HTROP_PB.Message_RCRS) */ {
 public:
  Message_RCRS();
  virtual ~Message_RCRS();

  Message_RCRS(const Message_RCRS& from);

  inline Message_RCRS& operator=(const Message_RCRS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message_RCRS& default_instance();

  void Swap(Message_RCRS* other);

  // implements Message ----------------------------------------------

  inline Message_RCRS* New() const { return New(NULL); }

  Message_RCRS* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message_RCRS& from);
  void MergeFrom(const Message_RCRS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Message_RCRS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Message_RCRS_ScopInfo ScopInfo;

  // accessors -------------------------------------------------------

  // repeated .HTROP_PB.Message_RCRS.ScopInfo scopList = 1;
  int scoplist_size() const;
  void clear_scoplist();
  static const int kScopListFieldNumber = 1;
  const ::HTROP_PB::Message_RCRS_ScopInfo& scoplist(int index) const;
  ::HTROP_PB::Message_RCRS_ScopInfo* mutable_scoplist(int index);
  ::HTROP_PB::Message_RCRS_ScopInfo* add_scoplist();
  ::google::protobuf::RepeatedPtrField< ::HTROP_PB::Message_RCRS_ScopInfo >*
      mutable_scoplist();
  const ::google::protobuf::RepeatedPtrField< ::HTROP_PB::Message_RCRS_ScopInfo >&
      scoplist() const;

  // optional string scopFunctionParentName = 2;
  bool has_scopfunctionparentname() const;
  void clear_scopfunctionparentname();
  static const int kScopFunctionParentNameFieldNumber = 2;
  const ::std::string& scopfunctionparentname() const;
  void set_scopfunctionparentname(const ::std::string& value);
  void set_scopfunctionparentname(const char* value);
  void set_scopfunctionparentname(const char* value, size_t size);
  ::std::string* mutable_scopfunctionparentname();
  ::std::string* release_scopfunctionparentname();
  void set_allocated_scopfunctionparentname(::std::string* scopfunctionparentname);

  // @@protoc_insertion_point(class_scope:HTROP_PB.Message_RCRS)
 private:
  inline void set_has_scopfunctionparentname();
  inline void clear_has_scopfunctionparentname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::HTROP_PB::Message_RCRS_ScopInfo > scoplist_;
  ::google::protobuf::internal::ArenaStringPtr scopfunctionparentname_;
  friend void  protobuf_AddDesc_hds_2eproto();
  friend void protobuf_AssignDesc_hds_2eproto();
  friend void protobuf_ShutdownFile_hds_2eproto();

  void InitAsDefaultInstance();
  static Message_RCRS* default_instance_;
};
// -------------------------------------------------------------------

class Message_RSRC_ScopFunctionOCLInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo) */ {
 public:
  Message_RSRC_ScopFunctionOCLInfo();
  virtual ~Message_RSRC_ScopFunctionOCLInfo();

  Message_RSRC_ScopFunctionOCLInfo(const Message_RSRC_ScopFunctionOCLInfo& from);

  inline Message_RSRC_ScopFunctionOCLInfo& operator=(const Message_RSRC_ScopFunctionOCLInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message_RSRC_ScopFunctionOCLInfo& default_instance();

  void Swap(Message_RSRC_ScopFunctionOCLInfo* other);

  // implements Message ----------------------------------------------

  inline Message_RSRC_ScopFunctionOCLInfo* New() const { return New(NULL); }

  Message_RSRC_ScopFunctionOCLInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message_RSRC_ScopFunctionOCLInfo& from);
  void MergeFrom(const Message_RSRC_ScopFunctionOCLInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Message_RSRC_ScopFunctionOCLInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string scopFunctionName = 1;
  bool has_scopfunctionname() const;
  void clear_scopfunctionname();
  static const int kScopFunctionNameFieldNumber = 1;
  const ::std::string& scopfunctionname() const;
  void set_scopfunctionname(const ::std::string& value);
  void set_scopfunctionname(const char* value);
  void set_scopfunctionname(const char* value, size_t size);
  ::std::string* mutable_scopfunctionname();
  ::std::string* release_scopfunctionname();
  void set_allocated_scopfunctionname(::std::string* scopfunctionname);

  // optional string scopOCLKernelName = 2;
  bool has_scopoclkernelname() const;
  void clear_scopoclkernelname();
  static const int kScopOCLKernelNameFieldNumber = 2;
  const ::std::string& scopoclkernelname() const;
  void set_scopoclkernelname(const ::std::string& value);
  void set_scopoclkernelname(const char* value);
  void set_scopoclkernelname(const char* value, size_t size);
  ::std::string* mutable_scopoclkernelname();
  ::std::string* release_scopoclkernelname();
  void set_allocated_scopoclkernelname(::std::string* scopoclkernelname);

  // repeated int32 workgroup_arg_index = 3;
  int workgroup_arg_index_size() const;
  void clear_workgroup_arg_index();
  static const int kWorkgroupArgIndexFieldNumber = 3;
  ::google::protobuf::int32 workgroup_arg_index(int index) const;
  void set_workgroup_arg_index(int index, ::google::protobuf::int32 value);
  void add_workgroup_arg_index(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      workgroup_arg_index() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_workgroup_arg_index();

  // repeated int32 workgroup_arg_index_offset = 4;
  int workgroup_arg_index_offset_size() const;
  void clear_workgroup_arg_index_offset();
  static const int kWorkgroupArgIndexOffsetFieldNumber = 4;
  ::google::protobuf::int32 workgroup_arg_index_offset(int index) const;
  void set_workgroup_arg_index_offset(int index, ::google::protobuf::int32 value);
  void add_workgroup_arg_index_offset(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      workgroup_arg_index_offset() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_workgroup_arg_index_offset();

  // @@protoc_insertion_point(class_scope:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo)
 private:
  inline void set_has_scopfunctionname();
  inline void clear_has_scopfunctionname();
  inline void set_has_scopoclkernelname();
  inline void clear_has_scopoclkernelname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr scopfunctionname_;
  ::google::protobuf::internal::ArenaStringPtr scopoclkernelname_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > workgroup_arg_index_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > workgroup_arg_index_offset_;
  friend void  protobuf_AddDesc_hds_2eproto();
  friend void protobuf_AssignDesc_hds_2eproto();
  friend void protobuf_ShutdownFile_hds_2eproto();

  void InitAsDefaultInstance();
  static Message_RSRC_ScopFunctionOCLInfo* default_instance_;
};
// -------------------------------------------------------------------

class Message_RSRC : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HTROP_PB.Message_RSRC) */ {
 public:
  Message_RSRC();
  virtual ~Message_RSRC();

  Message_RSRC(const Message_RSRC& from);

  inline Message_RSRC& operator=(const Message_RSRC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message_RSRC& default_instance();

  void Swap(Message_RSRC* other);

  // implements Message ----------------------------------------------

  inline Message_RSRC* New() const { return New(NULL); }

  Message_RSRC* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message_RSRC& from);
  void MergeFrom(const Message_RSRC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Message_RSRC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Message_RSRC_ScopFunctionOCLInfo ScopFunctionOCLInfo;

  // accessors -------------------------------------------------------

  // repeated .HTROP_PB.Message_RSRC.ScopFunctionOCLInfo scopFunctions = 1;
  int scopfunctions_size() const;
  void clear_scopfunctions();
  static const int kScopFunctionsFieldNumber = 1;
  const ::HTROP_PB::Message_RSRC_ScopFunctionOCLInfo& scopfunctions(int index) const;
  ::HTROP_PB::Message_RSRC_ScopFunctionOCLInfo* mutable_scopfunctions(int index);
  ::HTROP_PB::Message_RSRC_ScopFunctionOCLInfo* add_scopfunctions();
  ::google::protobuf::RepeatedPtrField< ::HTROP_PB::Message_RSRC_ScopFunctionOCLInfo >*
      mutable_scopfunctions();
  const ::google::protobuf::RepeatedPtrField< ::HTROP_PB::Message_RSRC_ScopFunctionOCLInfo >&
      scopfunctions() const;

  // optional string oclKernelFileName = 2;
  bool has_oclkernelfilename() const;
  void clear_oclkernelfilename();
  static const int kOclKernelFileNameFieldNumber = 2;
  const ::std::string& oclkernelfilename() const;
  void set_oclkernelfilename(const ::std::string& value);
  void set_oclkernelfilename(const char* value);
  void set_oclkernelfilename(const char* value, size_t size);
  ::std::string* mutable_oclkernelfilename();
  ::std::string* release_oclkernelfilename();
  void set_allocated_oclkernelfilename(::std::string* oclkernelfilename);

  // optional uint32 binarySize = 3;
  bool has_binarysize() const;
  void clear_binarysize();
  static const int kBinarySizeFieldNumber = 3;
  ::google::protobuf::uint32 binarysize() const;
  void set_binarysize(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:HTROP_PB.Message_RSRC)
 private:
  inline void set_has_oclkernelfilename();
  inline void clear_has_oclkernelfilename();
  inline void set_has_binarysize();
  inline void clear_has_binarysize();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::HTROP_PB::Message_RSRC_ScopFunctionOCLInfo > scopfunctions_;
  ::google::protobuf::internal::ArenaStringPtr oclkernelfilename_;
  ::google::protobuf::uint32 binarysize_;
  friend void  protobuf_AddDesc_hds_2eproto();
  friend void protobuf_AssignDesc_hds_2eproto();
  friend void protobuf_ShutdownFile_hds_2eproto();

  void InitAsDefaultInstance();
  static Message_RSRC* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LLVM_IR_Req

// -------------------------------------------------------------------

// BinaryData

// optional bytes binary_data = 1;
inline bool BinaryData::has_binary_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BinaryData::set_has_binary_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BinaryData::clear_has_binary_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BinaryData::clear_binary_data() {
  binary_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_binary_data();
}
inline const ::std::string& BinaryData::binary_data() const {
  // @@protoc_insertion_point(field_get:HTROP_PB.BinaryData.binary_data)
  return binary_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BinaryData::set_binary_data(const ::std::string& value) {
  set_has_binary_data();
  binary_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HTROP_PB.BinaryData.binary_data)
}
inline void BinaryData::set_binary_data(const char* value) {
  set_has_binary_data();
  binary_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HTROP_PB.BinaryData.binary_data)
}
inline void BinaryData::set_binary_data(const void* value, size_t size) {
  set_has_binary_data();
  binary_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HTROP_PB.BinaryData.binary_data)
}
inline ::std::string* BinaryData::mutable_binary_data() {
  set_has_binary_data();
  // @@protoc_insertion_point(field_mutable:HTROP_PB.BinaryData.binary_data)
  return binary_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BinaryData::release_binary_data() {
  // @@protoc_insertion_point(field_release:HTROP_PB.BinaryData.binary_data)
  clear_has_binary_data();
  return binary_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BinaryData::set_allocated_binary_data(::std::string* binary_data) {
  if (binary_data != NULL) {
    set_has_binary_data();
  } else {
    clear_has_binary_data();
  }
  binary_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), binary_data);
  // @@protoc_insertion_point(field_set_allocated:HTROP_PB.BinaryData.binary_data)
}

// -------------------------------------------------------------------

// Message_RCRS_ScopInfo

// optional string scopFunctionName = 1;
inline bool Message_RCRS_ScopInfo::has_scopfunctionname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message_RCRS_ScopInfo::set_has_scopfunctionname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message_RCRS_ScopInfo::clear_has_scopfunctionname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message_RCRS_ScopInfo::clear_scopfunctionname() {
  scopfunctionname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scopfunctionname();
}
inline const ::std::string& Message_RCRS_ScopInfo::scopfunctionname() const {
  // @@protoc_insertion_point(field_get:HTROP_PB.Message_RCRS.ScopInfo.scopFunctionName)
  return scopfunctionname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_RCRS_ScopInfo::set_scopfunctionname(const ::std::string& value) {
  set_has_scopfunctionname();
  scopfunctionname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HTROP_PB.Message_RCRS.ScopInfo.scopFunctionName)
}
inline void Message_RCRS_ScopInfo::set_scopfunctionname(const char* value) {
  set_has_scopfunctionname();
  scopfunctionname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HTROP_PB.Message_RCRS.ScopInfo.scopFunctionName)
}
inline void Message_RCRS_ScopInfo::set_scopfunctionname(const char* value, size_t size) {
  set_has_scopfunctionname();
  scopfunctionname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HTROP_PB.Message_RCRS.ScopInfo.scopFunctionName)
}
inline ::std::string* Message_RCRS_ScopInfo::mutable_scopfunctionname() {
  set_has_scopfunctionname();
  // @@protoc_insertion_point(field_mutable:HTROP_PB.Message_RCRS.ScopInfo.scopFunctionName)
  return scopfunctionname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message_RCRS_ScopInfo::release_scopfunctionname() {
  // @@protoc_insertion_point(field_release:HTROP_PB.Message_RCRS.ScopInfo.scopFunctionName)
  clear_has_scopfunctionname();
  return scopfunctionname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_RCRS_ScopInfo::set_allocated_scopfunctionname(::std::string* scopfunctionname) {
  if (scopfunctionname != NULL) {
    set_has_scopfunctionname();
  } else {
    clear_has_scopfunctionname();
  }
  scopfunctionname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scopfunctionname);
  // @@protoc_insertion_point(field_set_allocated:HTROP_PB.Message_RCRS.ScopInfo.scopFunctionName)
}

// optional uint32 max_codegen_loop_depth = 2;
inline bool Message_RCRS_ScopInfo::has_max_codegen_loop_depth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message_RCRS_ScopInfo::set_has_max_codegen_loop_depth() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message_RCRS_ScopInfo::clear_has_max_codegen_loop_depth() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message_RCRS_ScopInfo::clear_max_codegen_loop_depth() {
  max_codegen_loop_depth_ = 0u;
  clear_has_max_codegen_loop_depth();
}
inline ::google::protobuf::uint32 Message_RCRS_ScopInfo::max_codegen_loop_depth() const {
  // @@protoc_insertion_point(field_get:HTROP_PB.Message_RCRS.ScopInfo.max_codegen_loop_depth)
  return max_codegen_loop_depth_;
}
inline void Message_RCRS_ScopInfo::set_max_codegen_loop_depth(::google::protobuf::uint32 value) {
  set_has_max_codegen_loop_depth();
  max_codegen_loop_depth_ = value;
  // @@protoc_insertion_point(field_set:HTROP_PB.Message_RCRS.ScopInfo.max_codegen_loop_depth)
}

// -------------------------------------------------------------------

// Message_RCRS

// repeated .HTROP_PB.Message_RCRS.ScopInfo scopList = 1;
inline int Message_RCRS::scoplist_size() const {
  return scoplist_.size();
}
inline void Message_RCRS::clear_scoplist() {
  scoplist_.Clear();
}
inline const ::HTROP_PB::Message_RCRS_ScopInfo& Message_RCRS::scoplist(int index) const {
  // @@protoc_insertion_point(field_get:HTROP_PB.Message_RCRS.scopList)
  return scoplist_.Get(index);
}
inline ::HTROP_PB::Message_RCRS_ScopInfo* Message_RCRS::mutable_scoplist(int index) {
  // @@protoc_insertion_point(field_mutable:HTROP_PB.Message_RCRS.scopList)
  return scoplist_.Mutable(index);
}
inline ::HTROP_PB::Message_RCRS_ScopInfo* Message_RCRS::add_scoplist() {
  // @@protoc_insertion_point(field_add:HTROP_PB.Message_RCRS.scopList)
  return scoplist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::HTROP_PB::Message_RCRS_ScopInfo >*
Message_RCRS::mutable_scoplist() {
  // @@protoc_insertion_point(field_mutable_list:HTROP_PB.Message_RCRS.scopList)
  return &scoplist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::HTROP_PB::Message_RCRS_ScopInfo >&
Message_RCRS::scoplist() const {
  // @@protoc_insertion_point(field_list:HTROP_PB.Message_RCRS.scopList)
  return scoplist_;
}

// optional string scopFunctionParentName = 2;
inline bool Message_RCRS::has_scopfunctionparentname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message_RCRS::set_has_scopfunctionparentname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message_RCRS::clear_has_scopfunctionparentname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message_RCRS::clear_scopfunctionparentname() {
  scopfunctionparentname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scopfunctionparentname();
}
inline const ::std::string& Message_RCRS::scopfunctionparentname() const {
  // @@protoc_insertion_point(field_get:HTROP_PB.Message_RCRS.scopFunctionParentName)
  return scopfunctionparentname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_RCRS::set_scopfunctionparentname(const ::std::string& value) {
  set_has_scopfunctionparentname();
  scopfunctionparentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HTROP_PB.Message_RCRS.scopFunctionParentName)
}
inline void Message_RCRS::set_scopfunctionparentname(const char* value) {
  set_has_scopfunctionparentname();
  scopfunctionparentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HTROP_PB.Message_RCRS.scopFunctionParentName)
}
inline void Message_RCRS::set_scopfunctionparentname(const char* value, size_t size) {
  set_has_scopfunctionparentname();
  scopfunctionparentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HTROP_PB.Message_RCRS.scopFunctionParentName)
}
inline ::std::string* Message_RCRS::mutable_scopfunctionparentname() {
  set_has_scopfunctionparentname();
  // @@protoc_insertion_point(field_mutable:HTROP_PB.Message_RCRS.scopFunctionParentName)
  return scopfunctionparentname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message_RCRS::release_scopfunctionparentname() {
  // @@protoc_insertion_point(field_release:HTROP_PB.Message_RCRS.scopFunctionParentName)
  clear_has_scopfunctionparentname();
  return scopfunctionparentname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_RCRS::set_allocated_scopfunctionparentname(::std::string* scopfunctionparentname) {
  if (scopfunctionparentname != NULL) {
    set_has_scopfunctionparentname();
  } else {
    clear_has_scopfunctionparentname();
  }
  scopfunctionparentname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scopfunctionparentname);
  // @@protoc_insertion_point(field_set_allocated:HTROP_PB.Message_RCRS.scopFunctionParentName)
}

// -------------------------------------------------------------------

// Message_RSRC_ScopFunctionOCLInfo

// optional string scopFunctionName = 1;
inline bool Message_RSRC_ScopFunctionOCLInfo::has_scopfunctionname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message_RSRC_ScopFunctionOCLInfo::set_has_scopfunctionname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message_RSRC_ScopFunctionOCLInfo::clear_has_scopfunctionname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message_RSRC_ScopFunctionOCLInfo::clear_scopfunctionname() {
  scopfunctionname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scopfunctionname();
}
inline const ::std::string& Message_RSRC_ScopFunctionOCLInfo::scopfunctionname() const {
  // @@protoc_insertion_point(field_get:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopFunctionName)
  return scopfunctionname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_RSRC_ScopFunctionOCLInfo::set_scopfunctionname(const ::std::string& value) {
  set_has_scopfunctionname();
  scopfunctionname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopFunctionName)
}
inline void Message_RSRC_ScopFunctionOCLInfo::set_scopfunctionname(const char* value) {
  set_has_scopfunctionname();
  scopfunctionname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopFunctionName)
}
inline void Message_RSRC_ScopFunctionOCLInfo::set_scopfunctionname(const char* value, size_t size) {
  set_has_scopfunctionname();
  scopfunctionname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopFunctionName)
}
inline ::std::string* Message_RSRC_ScopFunctionOCLInfo::mutable_scopfunctionname() {
  set_has_scopfunctionname();
  // @@protoc_insertion_point(field_mutable:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopFunctionName)
  return scopfunctionname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message_RSRC_ScopFunctionOCLInfo::release_scopfunctionname() {
  // @@protoc_insertion_point(field_release:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopFunctionName)
  clear_has_scopfunctionname();
  return scopfunctionname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_RSRC_ScopFunctionOCLInfo::set_allocated_scopfunctionname(::std::string* scopfunctionname) {
  if (scopfunctionname != NULL) {
    set_has_scopfunctionname();
  } else {
    clear_has_scopfunctionname();
  }
  scopfunctionname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scopfunctionname);
  // @@protoc_insertion_point(field_set_allocated:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopFunctionName)
}

// optional string scopOCLKernelName = 2;
inline bool Message_RSRC_ScopFunctionOCLInfo::has_scopoclkernelname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message_RSRC_ScopFunctionOCLInfo::set_has_scopoclkernelname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message_RSRC_ScopFunctionOCLInfo::clear_has_scopoclkernelname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message_RSRC_ScopFunctionOCLInfo::clear_scopoclkernelname() {
  scopoclkernelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scopoclkernelname();
}
inline const ::std::string& Message_RSRC_ScopFunctionOCLInfo::scopoclkernelname() const {
  // @@protoc_insertion_point(field_get:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopOCLKernelName)
  return scopoclkernelname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_RSRC_ScopFunctionOCLInfo::set_scopoclkernelname(const ::std::string& value) {
  set_has_scopoclkernelname();
  scopoclkernelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopOCLKernelName)
}
inline void Message_RSRC_ScopFunctionOCLInfo::set_scopoclkernelname(const char* value) {
  set_has_scopoclkernelname();
  scopoclkernelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopOCLKernelName)
}
inline void Message_RSRC_ScopFunctionOCLInfo::set_scopoclkernelname(const char* value, size_t size) {
  set_has_scopoclkernelname();
  scopoclkernelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopOCLKernelName)
}
inline ::std::string* Message_RSRC_ScopFunctionOCLInfo::mutable_scopoclkernelname() {
  set_has_scopoclkernelname();
  // @@protoc_insertion_point(field_mutable:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopOCLKernelName)
  return scopoclkernelname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message_RSRC_ScopFunctionOCLInfo::release_scopoclkernelname() {
  // @@protoc_insertion_point(field_release:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopOCLKernelName)
  clear_has_scopoclkernelname();
  return scopoclkernelname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_RSRC_ScopFunctionOCLInfo::set_allocated_scopoclkernelname(::std::string* scopoclkernelname) {
  if (scopoclkernelname != NULL) {
    set_has_scopoclkernelname();
  } else {
    clear_has_scopoclkernelname();
  }
  scopoclkernelname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scopoclkernelname);
  // @@protoc_insertion_point(field_set_allocated:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopOCLKernelName)
}

// repeated int32 workgroup_arg_index = 3;
inline int Message_RSRC_ScopFunctionOCLInfo::workgroup_arg_index_size() const {
  return workgroup_arg_index_.size();
}
inline void Message_RSRC_ScopFunctionOCLInfo::clear_workgroup_arg_index() {
  workgroup_arg_index_.Clear();
}
inline ::google::protobuf::int32 Message_RSRC_ScopFunctionOCLInfo::workgroup_arg_index(int index) const {
  // @@protoc_insertion_point(field_get:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.workgroup_arg_index)
  return workgroup_arg_index_.Get(index);
}
inline void Message_RSRC_ScopFunctionOCLInfo::set_workgroup_arg_index(int index, ::google::protobuf::int32 value) {
  workgroup_arg_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.workgroup_arg_index)
}
inline void Message_RSRC_ScopFunctionOCLInfo::add_workgroup_arg_index(::google::protobuf::int32 value) {
  workgroup_arg_index_.Add(value);
  // @@protoc_insertion_point(field_add:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.workgroup_arg_index)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Message_RSRC_ScopFunctionOCLInfo::workgroup_arg_index() const {
  // @@protoc_insertion_point(field_list:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.workgroup_arg_index)
  return workgroup_arg_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Message_RSRC_ScopFunctionOCLInfo::mutable_workgroup_arg_index() {
  // @@protoc_insertion_point(field_mutable_list:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.workgroup_arg_index)
  return &workgroup_arg_index_;
}

// repeated int32 workgroup_arg_index_offset = 4;
inline int Message_RSRC_ScopFunctionOCLInfo::workgroup_arg_index_offset_size() const {
  return workgroup_arg_index_offset_.size();
}
inline void Message_RSRC_ScopFunctionOCLInfo::clear_workgroup_arg_index_offset() {
  workgroup_arg_index_offset_.Clear();
}
inline ::google::protobuf::int32 Message_RSRC_ScopFunctionOCLInfo::workgroup_arg_index_offset(int index) const {
  // @@protoc_insertion_point(field_get:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.workgroup_arg_index_offset)
  return workgroup_arg_index_offset_.Get(index);
}
inline void Message_RSRC_ScopFunctionOCLInfo::set_workgroup_arg_index_offset(int index, ::google::protobuf::int32 value) {
  workgroup_arg_index_offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.workgroup_arg_index_offset)
}
inline void Message_RSRC_ScopFunctionOCLInfo::add_workgroup_arg_index_offset(::google::protobuf::int32 value) {
  workgroup_arg_index_offset_.Add(value);
  // @@protoc_insertion_point(field_add:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.workgroup_arg_index_offset)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Message_RSRC_ScopFunctionOCLInfo::workgroup_arg_index_offset() const {
  // @@protoc_insertion_point(field_list:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.workgroup_arg_index_offset)
  return workgroup_arg_index_offset_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Message_RSRC_ScopFunctionOCLInfo::mutable_workgroup_arg_index_offset() {
  // @@protoc_insertion_point(field_mutable_list:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.workgroup_arg_index_offset)
  return &workgroup_arg_index_offset_;
}

// -------------------------------------------------------------------

// Message_RSRC

// repeated .HTROP_PB.Message_RSRC.ScopFunctionOCLInfo scopFunctions = 1;
inline int Message_RSRC::scopfunctions_size() const {
  return scopfunctions_.size();
}
inline void Message_RSRC::clear_scopfunctions() {
  scopfunctions_.Clear();
}
inline const ::HTROP_PB::Message_RSRC_ScopFunctionOCLInfo& Message_RSRC::scopfunctions(int index) const {
  // @@protoc_insertion_point(field_get:HTROP_PB.Message_RSRC.scopFunctions)
  return scopfunctions_.Get(index);
}
inline ::HTROP_PB::Message_RSRC_ScopFunctionOCLInfo* Message_RSRC::mutable_scopfunctions(int index) {
  // @@protoc_insertion_point(field_mutable:HTROP_PB.Message_RSRC.scopFunctions)
  return scopfunctions_.Mutable(index);
}
inline ::HTROP_PB::Message_RSRC_ScopFunctionOCLInfo* Message_RSRC::add_scopfunctions() {
  // @@protoc_insertion_point(field_add:HTROP_PB.Message_RSRC.scopFunctions)
  return scopfunctions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::HTROP_PB::Message_RSRC_ScopFunctionOCLInfo >*
Message_RSRC::mutable_scopfunctions() {
  // @@protoc_insertion_point(field_mutable_list:HTROP_PB.Message_RSRC.scopFunctions)
  return &scopfunctions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::HTROP_PB::Message_RSRC_ScopFunctionOCLInfo >&
Message_RSRC::scopfunctions() const {
  // @@protoc_insertion_point(field_list:HTROP_PB.Message_RSRC.scopFunctions)
  return scopfunctions_;
}

// optional string oclKernelFileName = 2;
inline bool Message_RSRC::has_oclkernelfilename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message_RSRC::set_has_oclkernelfilename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message_RSRC::clear_has_oclkernelfilename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message_RSRC::clear_oclkernelfilename() {
  oclkernelfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_oclkernelfilename();
}
inline const ::std::string& Message_RSRC::oclkernelfilename() const {
  // @@protoc_insertion_point(field_get:HTROP_PB.Message_RSRC.oclKernelFileName)
  return oclkernelfilename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_RSRC::set_oclkernelfilename(const ::std::string& value) {
  set_has_oclkernelfilename();
  oclkernelfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HTROP_PB.Message_RSRC.oclKernelFileName)
}
inline void Message_RSRC::set_oclkernelfilename(const char* value) {
  set_has_oclkernelfilename();
  oclkernelfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HTROP_PB.Message_RSRC.oclKernelFileName)
}
inline void Message_RSRC::set_oclkernelfilename(const char* value, size_t size) {
  set_has_oclkernelfilename();
  oclkernelfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HTROP_PB.Message_RSRC.oclKernelFileName)
}
inline ::std::string* Message_RSRC::mutable_oclkernelfilename() {
  set_has_oclkernelfilename();
  // @@protoc_insertion_point(field_mutable:HTROP_PB.Message_RSRC.oclKernelFileName)
  return oclkernelfilename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message_RSRC::release_oclkernelfilename() {
  // @@protoc_insertion_point(field_release:HTROP_PB.Message_RSRC.oclKernelFileName)
  clear_has_oclkernelfilename();
  return oclkernelfilename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_RSRC::set_allocated_oclkernelfilename(::std::string* oclkernelfilename) {
  if (oclkernelfilename != NULL) {
    set_has_oclkernelfilename();
  } else {
    clear_has_oclkernelfilename();
  }
  oclkernelfilename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oclkernelfilename);
  // @@protoc_insertion_point(field_set_allocated:HTROP_PB.Message_RSRC.oclKernelFileName)
}

// optional uint32 binarySize = 3;
inline bool Message_RSRC::has_binarysize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message_RSRC::set_has_binarysize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message_RSRC::clear_has_binarysize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message_RSRC::clear_binarysize() {
  binarysize_ = 0u;
  clear_has_binarysize();
}
inline ::google::protobuf::uint32 Message_RSRC::binarysize() const {
  // @@protoc_insertion_point(field_get:HTROP_PB.Message_RSRC.binarySize)
  return binarysize_;
}
inline void Message_RSRC::set_binarysize(::google::protobuf::uint32 value) {
  set_has_binarysize();
  binarysize_ = value;
  // @@protoc_insertion_point(field_set:HTROP_PB.Message_RSRC.binarySize)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace HTROP_PB

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hds_2eproto__INCLUDED
