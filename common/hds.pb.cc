// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hds.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hds.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HTROP_PB {

namespace {

const ::google::protobuf::Descriptor* LLVM_IR_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LLVM_IR_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* BinaryData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinaryData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_RCRS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_RCRS_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_RCRS_ScopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_RCRS_ScopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_RSRC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_RSRC_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_RSRC_ScopFunctionOCLInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_RSRC_ScopFunctionOCLInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hds_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_hds_2eproto() {
  protobuf_AddDesc_hds_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hds.proto");
  GOOGLE_CHECK(file != NULL);
  LLVM_IR_Req_descriptor_ = file->message_type(0);
  static const int LLVM_IR_Req_offsets_[1] = {
  };
  LLVM_IR_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LLVM_IR_Req_descriptor_,
      LLVM_IR_Req::default_instance_,
      LLVM_IR_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LLVM_IR_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(LLVM_IR_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LLVM_IR_Req, _internal_metadata_),
      -1);
  BinaryData_descriptor_ = file->message_type(1);
  static const int BinaryData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryData, binary_data_),
  };
  BinaryData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BinaryData_descriptor_,
      BinaryData::default_instance_,
      BinaryData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryData, _has_bits_[0]),
      -1,
      -1,
      sizeof(BinaryData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryData, _internal_metadata_),
      -1);
  Message_RCRS_descriptor_ = file->message_type(2);
  static const int Message_RCRS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_RCRS, scoplist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_RCRS, scopfunctionparentname_),
  };
  Message_RCRS_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Message_RCRS_descriptor_,
      Message_RCRS::default_instance_,
      Message_RCRS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_RCRS, _has_bits_[0]),
      -1,
      -1,
      sizeof(Message_RCRS),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_RCRS, _internal_metadata_),
      -1);
  Message_RCRS_ScopInfo_descriptor_ = Message_RCRS_descriptor_->nested_type(0);
  static const int Message_RCRS_ScopInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_RCRS_ScopInfo, scopfunctionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_RCRS_ScopInfo, max_codegen_loop_depth_),
  };
  Message_RCRS_ScopInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Message_RCRS_ScopInfo_descriptor_,
      Message_RCRS_ScopInfo::default_instance_,
      Message_RCRS_ScopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_RCRS_ScopInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(Message_RCRS_ScopInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_RCRS_ScopInfo, _internal_metadata_),
      -1);
  Message_RSRC_descriptor_ = file->message_type(3);
  static const int Message_RSRC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_RSRC, scopfunctions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_RSRC, oclkernelfilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_RSRC, binarysize_),
  };
  Message_RSRC_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Message_RSRC_descriptor_,
      Message_RSRC::default_instance_,
      Message_RSRC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_RSRC, _has_bits_[0]),
      -1,
      -1,
      sizeof(Message_RSRC),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_RSRC, _internal_metadata_),
      -1);
  Message_RSRC_ScopFunctionOCLInfo_descriptor_ = Message_RSRC_descriptor_->nested_type(0);
  static const int Message_RSRC_ScopFunctionOCLInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_RSRC_ScopFunctionOCLInfo, scopfunctionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_RSRC_ScopFunctionOCLInfo, scopoclkernelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_RSRC_ScopFunctionOCLInfo, workgroup_arg_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_RSRC_ScopFunctionOCLInfo, workgroup_arg_index_offset_),
  };
  Message_RSRC_ScopFunctionOCLInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Message_RSRC_ScopFunctionOCLInfo_descriptor_,
      Message_RSRC_ScopFunctionOCLInfo::default_instance_,
      Message_RSRC_ScopFunctionOCLInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_RSRC_ScopFunctionOCLInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(Message_RSRC_ScopFunctionOCLInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_RSRC_ScopFunctionOCLInfo, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hds_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LLVM_IR_Req_descriptor_, &LLVM_IR_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BinaryData_descriptor_, &BinaryData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Message_RCRS_descriptor_, &Message_RCRS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Message_RCRS_ScopInfo_descriptor_, &Message_RCRS_ScopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Message_RSRC_descriptor_, &Message_RSRC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Message_RSRC_ScopFunctionOCLInfo_descriptor_, &Message_RSRC_ScopFunctionOCLInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hds_2eproto() {
  delete LLVM_IR_Req::default_instance_;
  delete LLVM_IR_Req_reflection_;
  delete BinaryData::default_instance_;
  delete BinaryData_reflection_;
  delete Message_RCRS::default_instance_;
  delete Message_RCRS_reflection_;
  delete Message_RCRS_ScopInfo::default_instance_;
  delete Message_RCRS_ScopInfo_reflection_;
  delete Message_RSRC::default_instance_;
  delete Message_RSRC_reflection_;
  delete Message_RSRC_ScopFunctionOCLInfo::default_instance_;
  delete Message_RSRC_ScopFunctionOCLInfo_reflection_;
}

void protobuf_AddDesc_hds_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_hds_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\thds.proto\022\010HTROP_PB\"\r\n\013LLVM_IR_Req\"!\n\n"
    "BinaryData\022\023\n\013binary_data\030\001 \001(\014\"\247\001\n\014Mess"
    "age_RCRS\0221\n\010scopList\030\001 \003(\0132\037.HTROP_PB.Me"
    "ssage_RCRS.ScopInfo\022\036\n\026scopFunctionParen"
    "tName\030\002 \001(\t\032D\n\010ScopInfo\022\030\n\020scopFunctionN"
    "ame\030\001 \001(\t\022\036\n\026max_codegen_loop_depth\030\002 \001("
    "\r\"\216\002\n\014Message_RSRC\022A\n\rscopFunctions\030\001 \003("
    "\0132*.HTROP_PB.Message_RSRC.ScopFunctionOC"
    "LInfo\022\031\n\021oclKernelFileName\030\002 \001(\t\022\022\n\nbina"
    "rySize\030\003 \001(\r\032\213\001\n\023ScopFunctionOCLInfo\022\030\n\020"
    "scopFunctionName\030\001 \001(\t\022\031\n\021scopOCLKernelN"
    "ame\030\002 \001(\t\022\033\n\023workgroup_arg_index\030\003 \003(\005\022\""
    "\n\032workgroup_arg_index_offset\030\004 \003(\005", 514);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hds.proto", &protobuf_RegisterTypes);
  LLVM_IR_Req::default_instance_ = new LLVM_IR_Req();
  BinaryData::default_instance_ = new BinaryData();
  Message_RCRS::default_instance_ = new Message_RCRS();
  Message_RCRS_ScopInfo::default_instance_ = new Message_RCRS_ScopInfo();
  Message_RSRC::default_instance_ = new Message_RSRC();
  Message_RSRC_ScopFunctionOCLInfo::default_instance_ = new Message_RSRC_ScopFunctionOCLInfo();
  LLVM_IR_Req::default_instance_->InitAsDefaultInstance();
  BinaryData::default_instance_->InitAsDefaultInstance();
  Message_RCRS::default_instance_->InitAsDefaultInstance();
  Message_RCRS_ScopInfo::default_instance_->InitAsDefaultInstance();
  Message_RSRC::default_instance_->InitAsDefaultInstance();
  Message_RSRC_ScopFunctionOCLInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hds_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hds_2eproto {
  StaticDescriptorInitializer_hds_2eproto() {
    protobuf_AddDesc_hds_2eproto();
  }
} static_descriptor_initializer_hds_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LLVM_IR_Req::LLVM_IR_Req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HTROP_PB.LLVM_IR_Req)
}

void LLVM_IR_Req::InitAsDefaultInstance() {
}

LLVM_IR_Req::LLVM_IR_Req(const LLVM_IR_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HTROP_PB.LLVM_IR_Req)
}

void LLVM_IR_Req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LLVM_IR_Req::~LLVM_IR_Req() {
  // @@protoc_insertion_point(destructor:HTROP_PB.LLVM_IR_Req)
  SharedDtor();
}

void LLVM_IR_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LLVM_IR_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LLVM_IR_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LLVM_IR_Req_descriptor_;
}

const LLVM_IR_Req& LLVM_IR_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hds_2eproto();
  return *default_instance_;
}

LLVM_IR_Req* LLVM_IR_Req::default_instance_ = NULL;

LLVM_IR_Req* LLVM_IR_Req::New(::google::protobuf::Arena* arena) const {
  LLVM_IR_Req* n = new LLVM_IR_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LLVM_IR_Req::Clear() {
// @@protoc_insertion_point(message_clear_start:HTROP_PB.LLVM_IR_Req)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LLVM_IR_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HTROP_PB.LLVM_IR_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:HTROP_PB.LLVM_IR_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HTROP_PB.LLVM_IR_Req)
  return false;
#undef DO_
}

void LLVM_IR_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HTROP_PB.LLVM_IR_Req)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HTROP_PB.LLVM_IR_Req)
}

::google::protobuf::uint8* LLVM_IR_Req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HTROP_PB.LLVM_IR_Req)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HTROP_PB.LLVM_IR_Req)
  return target;
}

int LLVM_IR_Req::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:HTROP_PB.LLVM_IR_Req)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LLVM_IR_Req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HTROP_PB.LLVM_IR_Req)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LLVM_IR_Req* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LLVM_IR_Req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HTROP_PB.LLVM_IR_Req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HTROP_PB.LLVM_IR_Req)
    MergeFrom(*source);
  }
}

void LLVM_IR_Req::MergeFrom(const LLVM_IR_Req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HTROP_PB.LLVM_IR_Req)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LLVM_IR_Req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HTROP_PB.LLVM_IR_Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LLVM_IR_Req::CopyFrom(const LLVM_IR_Req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HTROP_PB.LLVM_IR_Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LLVM_IR_Req::IsInitialized() const {

  return true;
}

void LLVM_IR_Req::Swap(LLVM_IR_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LLVM_IR_Req::InternalSwap(LLVM_IR_Req* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LLVM_IR_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LLVM_IR_Req_descriptor_;
  metadata.reflection = LLVM_IR_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LLVM_IR_Req

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinaryData::kBinaryDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinaryData::BinaryData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HTROP_PB.BinaryData)
}

void BinaryData::InitAsDefaultInstance() {
}

BinaryData::BinaryData(const BinaryData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HTROP_PB.BinaryData)
}

void BinaryData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  binary_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BinaryData::~BinaryData() {
  // @@protoc_insertion_point(destructor:HTROP_PB.BinaryData)
  SharedDtor();
}

void BinaryData::SharedDtor() {
  binary_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BinaryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinaryData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BinaryData_descriptor_;
}

const BinaryData& BinaryData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hds_2eproto();
  return *default_instance_;
}

BinaryData* BinaryData::default_instance_ = NULL;

BinaryData* BinaryData::New(::google::protobuf::Arena* arena) const {
  BinaryData* n = new BinaryData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BinaryData::Clear() {
// @@protoc_insertion_point(message_clear_start:HTROP_PB.BinaryData)
  if (has_binary_data()) {
    binary_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BinaryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HTROP_PB.BinaryData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes binary_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HTROP_PB.BinaryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HTROP_PB.BinaryData)
  return false;
#undef DO_
}

void BinaryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HTROP_PB.BinaryData)
  // optional bytes binary_data = 1;
  if (has_binary_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->binary_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HTROP_PB.BinaryData)
}

::google::protobuf::uint8* BinaryData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HTROP_PB.BinaryData)
  // optional bytes binary_data = 1;
  if (has_binary_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->binary_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HTROP_PB.BinaryData)
  return target;
}

int BinaryData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:HTROP_PB.BinaryData)
  int total_size = 0;

  // optional bytes binary_data = 1;
  if (has_binary_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->binary_data());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinaryData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HTROP_PB.BinaryData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BinaryData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BinaryData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HTROP_PB.BinaryData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HTROP_PB.BinaryData)
    MergeFrom(*source);
  }
}

void BinaryData::MergeFrom(const BinaryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HTROP_PB.BinaryData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_binary_data()) {
      set_has_binary_data();
      binary_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.binary_data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BinaryData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HTROP_PB.BinaryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryData::CopyFrom(const BinaryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HTROP_PB.BinaryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryData::IsInitialized() const {

  return true;
}

void BinaryData::Swap(BinaryData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinaryData::InternalSwap(BinaryData* other) {
  binary_data_.Swap(&other->binary_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BinaryData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BinaryData_descriptor_;
  metadata.reflection = BinaryData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BinaryData

// optional bytes binary_data = 1;
bool BinaryData::has_binary_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BinaryData::set_has_binary_data() {
  _has_bits_[0] |= 0x00000001u;
}
void BinaryData::clear_has_binary_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void BinaryData::clear_binary_data() {
  binary_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_binary_data();
}
 const ::std::string& BinaryData::binary_data() const {
  // @@protoc_insertion_point(field_get:HTROP_PB.BinaryData.binary_data)
  return binary_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BinaryData::set_binary_data(const ::std::string& value) {
  set_has_binary_data();
  binary_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HTROP_PB.BinaryData.binary_data)
}
 void BinaryData::set_binary_data(const char* value) {
  set_has_binary_data();
  binary_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HTROP_PB.BinaryData.binary_data)
}
 void BinaryData::set_binary_data(const void* value, size_t size) {
  set_has_binary_data();
  binary_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HTROP_PB.BinaryData.binary_data)
}
 ::std::string* BinaryData::mutable_binary_data() {
  set_has_binary_data();
  // @@protoc_insertion_point(field_mutable:HTROP_PB.BinaryData.binary_data)
  return binary_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BinaryData::release_binary_data() {
  // @@protoc_insertion_point(field_release:HTROP_PB.BinaryData.binary_data)
  clear_has_binary_data();
  return binary_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BinaryData::set_allocated_binary_data(::std::string* binary_data) {
  if (binary_data != NULL) {
    set_has_binary_data();
  } else {
    clear_has_binary_data();
  }
  binary_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), binary_data);
  // @@protoc_insertion_point(field_set_allocated:HTROP_PB.BinaryData.binary_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message_RCRS_ScopInfo::kScopFunctionNameFieldNumber;
const int Message_RCRS_ScopInfo::kMaxCodegenLoopDepthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message_RCRS_ScopInfo::Message_RCRS_ScopInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HTROP_PB.Message_RCRS.ScopInfo)
}

void Message_RCRS_ScopInfo::InitAsDefaultInstance() {
}

Message_RCRS_ScopInfo::Message_RCRS_ScopInfo(const Message_RCRS_ScopInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HTROP_PB.Message_RCRS.ScopInfo)
}

void Message_RCRS_ScopInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  scopfunctionname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_codegen_loop_depth_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_RCRS_ScopInfo::~Message_RCRS_ScopInfo() {
  // @@protoc_insertion_point(destructor:HTROP_PB.Message_RCRS.ScopInfo)
  SharedDtor();
}

void Message_RCRS_ScopInfo::SharedDtor() {
  scopfunctionname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Message_RCRS_ScopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_RCRS_ScopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_RCRS_ScopInfo_descriptor_;
}

const Message_RCRS_ScopInfo& Message_RCRS_ScopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hds_2eproto();
  return *default_instance_;
}

Message_RCRS_ScopInfo* Message_RCRS_ScopInfo::default_instance_ = NULL;

Message_RCRS_ScopInfo* Message_RCRS_ScopInfo::New(::google::protobuf::Arena* arena) const {
  Message_RCRS_ScopInfo* n = new Message_RCRS_ScopInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message_RCRS_ScopInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:HTROP_PB.Message_RCRS.ScopInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_scopfunctionname()) {
      scopfunctionname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    max_codegen_loop_depth_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Message_RCRS_ScopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HTROP_PB.Message_RCRS.ScopInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string scopFunctionName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scopfunctionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scopfunctionname().data(), this->scopfunctionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HTROP_PB.Message_RCRS.ScopInfo.scopFunctionName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_codegen_loop_depth;
        break;
      }

      // optional uint32 max_codegen_loop_depth = 2;
      case 2: {
        if (tag == 16) {
         parse_max_codegen_loop_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_codegen_loop_depth_)));
          set_has_max_codegen_loop_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HTROP_PB.Message_RCRS.ScopInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HTROP_PB.Message_RCRS.ScopInfo)
  return false;
#undef DO_
}

void Message_RCRS_ScopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HTROP_PB.Message_RCRS.ScopInfo)
  // optional string scopFunctionName = 1;
  if (has_scopfunctionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scopfunctionname().data(), this->scopfunctionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HTROP_PB.Message_RCRS.ScopInfo.scopFunctionName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->scopfunctionname(), output);
  }

  // optional uint32 max_codegen_loop_depth = 2;
  if (has_max_codegen_loop_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_codegen_loop_depth(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HTROP_PB.Message_RCRS.ScopInfo)
}

::google::protobuf::uint8* Message_RCRS_ScopInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HTROP_PB.Message_RCRS.ScopInfo)
  // optional string scopFunctionName = 1;
  if (has_scopfunctionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scopfunctionname().data(), this->scopfunctionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HTROP_PB.Message_RCRS.ScopInfo.scopFunctionName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->scopfunctionname(), target);
  }

  // optional uint32 max_codegen_loop_depth = 2;
  if (has_max_codegen_loop_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_codegen_loop_depth(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HTROP_PB.Message_RCRS.ScopInfo)
  return target;
}

int Message_RCRS_ScopInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:HTROP_PB.Message_RCRS.ScopInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string scopFunctionName = 1;
    if (has_scopfunctionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scopfunctionname());
    }

    // optional uint32 max_codegen_loop_depth = 2;
    if (has_max_codegen_loop_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_codegen_loop_depth());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_RCRS_ScopInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HTROP_PB.Message_RCRS.ScopInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Message_RCRS_ScopInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Message_RCRS_ScopInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HTROP_PB.Message_RCRS.ScopInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HTROP_PB.Message_RCRS.ScopInfo)
    MergeFrom(*source);
  }
}

void Message_RCRS_ScopInfo::MergeFrom(const Message_RCRS_ScopInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HTROP_PB.Message_RCRS.ScopInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scopfunctionname()) {
      set_has_scopfunctionname();
      scopfunctionname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scopfunctionname_);
    }
    if (from.has_max_codegen_loop_depth()) {
      set_max_codegen_loop_depth(from.max_codegen_loop_depth());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Message_RCRS_ScopInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HTROP_PB.Message_RCRS.ScopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_RCRS_ScopInfo::CopyFrom(const Message_RCRS_ScopInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HTROP_PB.Message_RCRS.ScopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_RCRS_ScopInfo::IsInitialized() const {

  return true;
}

void Message_RCRS_ScopInfo::Swap(Message_RCRS_ScopInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message_RCRS_ScopInfo::InternalSwap(Message_RCRS_ScopInfo* other) {
  scopfunctionname_.Swap(&other->scopfunctionname_);
  std::swap(max_codegen_loop_depth_, other->max_codegen_loop_depth_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message_RCRS_ScopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_RCRS_ScopInfo_descriptor_;
  metadata.reflection = Message_RCRS_ScopInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message_RCRS::kScopListFieldNumber;
const int Message_RCRS::kScopFunctionParentNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message_RCRS::Message_RCRS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HTROP_PB.Message_RCRS)
}

void Message_RCRS::InitAsDefaultInstance() {
}

Message_RCRS::Message_RCRS(const Message_RCRS& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HTROP_PB.Message_RCRS)
}

void Message_RCRS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  scopfunctionparentname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_RCRS::~Message_RCRS() {
  // @@protoc_insertion_point(destructor:HTROP_PB.Message_RCRS)
  SharedDtor();
}

void Message_RCRS::SharedDtor() {
  scopfunctionparentname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Message_RCRS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_RCRS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_RCRS_descriptor_;
}

const Message_RCRS& Message_RCRS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hds_2eproto();
  return *default_instance_;
}

Message_RCRS* Message_RCRS::default_instance_ = NULL;

Message_RCRS* Message_RCRS::New(::google::protobuf::Arena* arena) const {
  Message_RCRS* n = new Message_RCRS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message_RCRS::Clear() {
// @@protoc_insertion_point(message_clear_start:HTROP_PB.Message_RCRS)
  if (has_scopfunctionparentname()) {
    scopfunctionparentname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  scoplist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Message_RCRS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HTROP_PB.Message_RCRS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HTROP_PB.Message_RCRS.ScopInfo scopList = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_scopList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_scoplist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_scopList;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_scopFunctionParentName;
        break;
      }

      // optional string scopFunctionParentName = 2;
      case 2: {
        if (tag == 18) {
         parse_scopFunctionParentName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scopfunctionparentname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scopfunctionparentname().data(), this->scopfunctionparentname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HTROP_PB.Message_RCRS.scopFunctionParentName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HTROP_PB.Message_RCRS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HTROP_PB.Message_RCRS)
  return false;
#undef DO_
}

void Message_RCRS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HTROP_PB.Message_RCRS)
  // repeated .HTROP_PB.Message_RCRS.ScopInfo scopList = 1;
  for (unsigned int i = 0, n = this->scoplist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->scoplist(i), output);
  }

  // optional string scopFunctionParentName = 2;
  if (has_scopfunctionparentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scopfunctionparentname().data(), this->scopfunctionparentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HTROP_PB.Message_RCRS.scopFunctionParentName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->scopfunctionparentname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HTROP_PB.Message_RCRS)
}

::google::protobuf::uint8* Message_RCRS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HTROP_PB.Message_RCRS)
  // repeated .HTROP_PB.Message_RCRS.ScopInfo scopList = 1;
  for (unsigned int i = 0, n = this->scoplist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->scoplist(i), false, target);
  }

  // optional string scopFunctionParentName = 2;
  if (has_scopfunctionparentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scopfunctionparentname().data(), this->scopfunctionparentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HTROP_PB.Message_RCRS.scopFunctionParentName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->scopfunctionparentname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HTROP_PB.Message_RCRS)
  return target;
}

int Message_RCRS::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:HTROP_PB.Message_RCRS)
  int total_size = 0;

  // optional string scopFunctionParentName = 2;
  if (has_scopfunctionparentname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scopfunctionparentname());
  }

  // repeated .HTROP_PB.Message_RCRS.ScopInfo scopList = 1;
  total_size += 1 * this->scoplist_size();
  for (int i = 0; i < this->scoplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scoplist(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_RCRS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HTROP_PB.Message_RCRS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Message_RCRS* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Message_RCRS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HTROP_PB.Message_RCRS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HTROP_PB.Message_RCRS)
    MergeFrom(*source);
  }
}

void Message_RCRS::MergeFrom(const Message_RCRS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HTROP_PB.Message_RCRS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  scoplist_.MergeFrom(from.scoplist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_scopfunctionparentname()) {
      set_has_scopfunctionparentname();
      scopfunctionparentname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scopfunctionparentname_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Message_RCRS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HTROP_PB.Message_RCRS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_RCRS::CopyFrom(const Message_RCRS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HTROP_PB.Message_RCRS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_RCRS::IsInitialized() const {

  return true;
}

void Message_RCRS::Swap(Message_RCRS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message_RCRS::InternalSwap(Message_RCRS* other) {
  scoplist_.UnsafeArenaSwap(&other->scoplist_);
  scopfunctionparentname_.Swap(&other->scopfunctionparentname_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message_RCRS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_RCRS_descriptor_;
  metadata.reflection = Message_RCRS_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message_RCRS_ScopInfo

// optional string scopFunctionName = 1;
bool Message_RCRS_ScopInfo::has_scopfunctionname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Message_RCRS_ScopInfo::set_has_scopfunctionname() {
  _has_bits_[0] |= 0x00000001u;
}
void Message_RCRS_ScopInfo::clear_has_scopfunctionname() {
  _has_bits_[0] &= ~0x00000001u;
}
void Message_RCRS_ScopInfo::clear_scopfunctionname() {
  scopfunctionname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scopfunctionname();
}
 const ::std::string& Message_RCRS_ScopInfo::scopfunctionname() const {
  // @@protoc_insertion_point(field_get:HTROP_PB.Message_RCRS.ScopInfo.scopFunctionName)
  return scopfunctionname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message_RCRS_ScopInfo::set_scopfunctionname(const ::std::string& value) {
  set_has_scopfunctionname();
  scopfunctionname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HTROP_PB.Message_RCRS.ScopInfo.scopFunctionName)
}
 void Message_RCRS_ScopInfo::set_scopfunctionname(const char* value) {
  set_has_scopfunctionname();
  scopfunctionname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HTROP_PB.Message_RCRS.ScopInfo.scopFunctionName)
}
 void Message_RCRS_ScopInfo::set_scopfunctionname(const char* value, size_t size) {
  set_has_scopfunctionname();
  scopfunctionname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HTROP_PB.Message_RCRS.ScopInfo.scopFunctionName)
}
 ::std::string* Message_RCRS_ScopInfo::mutable_scopfunctionname() {
  set_has_scopfunctionname();
  // @@protoc_insertion_point(field_mutable:HTROP_PB.Message_RCRS.ScopInfo.scopFunctionName)
  return scopfunctionname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message_RCRS_ScopInfo::release_scopfunctionname() {
  // @@protoc_insertion_point(field_release:HTROP_PB.Message_RCRS.ScopInfo.scopFunctionName)
  clear_has_scopfunctionname();
  return scopfunctionname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message_RCRS_ScopInfo::set_allocated_scopfunctionname(::std::string* scopfunctionname) {
  if (scopfunctionname != NULL) {
    set_has_scopfunctionname();
  } else {
    clear_has_scopfunctionname();
  }
  scopfunctionname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scopfunctionname);
  // @@protoc_insertion_point(field_set_allocated:HTROP_PB.Message_RCRS.ScopInfo.scopFunctionName)
}

// optional uint32 max_codegen_loop_depth = 2;
bool Message_RCRS_ScopInfo::has_max_codegen_loop_depth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Message_RCRS_ScopInfo::set_has_max_codegen_loop_depth() {
  _has_bits_[0] |= 0x00000002u;
}
void Message_RCRS_ScopInfo::clear_has_max_codegen_loop_depth() {
  _has_bits_[0] &= ~0x00000002u;
}
void Message_RCRS_ScopInfo::clear_max_codegen_loop_depth() {
  max_codegen_loop_depth_ = 0u;
  clear_has_max_codegen_loop_depth();
}
 ::google::protobuf::uint32 Message_RCRS_ScopInfo::max_codegen_loop_depth() const {
  // @@protoc_insertion_point(field_get:HTROP_PB.Message_RCRS.ScopInfo.max_codegen_loop_depth)
  return max_codegen_loop_depth_;
}
 void Message_RCRS_ScopInfo::set_max_codegen_loop_depth(::google::protobuf::uint32 value) {
  set_has_max_codegen_loop_depth();
  max_codegen_loop_depth_ = value;
  // @@protoc_insertion_point(field_set:HTROP_PB.Message_RCRS.ScopInfo.max_codegen_loop_depth)
}

// -------------------------------------------------------------------

// Message_RCRS

// repeated .HTROP_PB.Message_RCRS.ScopInfo scopList = 1;
int Message_RCRS::scoplist_size() const {
  return scoplist_.size();
}
void Message_RCRS::clear_scoplist() {
  scoplist_.Clear();
}
const ::HTROP_PB::Message_RCRS_ScopInfo& Message_RCRS::scoplist(int index) const {
  // @@protoc_insertion_point(field_get:HTROP_PB.Message_RCRS.scopList)
  return scoplist_.Get(index);
}
::HTROP_PB::Message_RCRS_ScopInfo* Message_RCRS::mutable_scoplist(int index) {
  // @@protoc_insertion_point(field_mutable:HTROP_PB.Message_RCRS.scopList)
  return scoplist_.Mutable(index);
}
::HTROP_PB::Message_RCRS_ScopInfo* Message_RCRS::add_scoplist() {
  // @@protoc_insertion_point(field_add:HTROP_PB.Message_RCRS.scopList)
  return scoplist_.Add();
}
::google::protobuf::RepeatedPtrField< ::HTROP_PB::Message_RCRS_ScopInfo >*
Message_RCRS::mutable_scoplist() {
  // @@protoc_insertion_point(field_mutable_list:HTROP_PB.Message_RCRS.scopList)
  return &scoplist_;
}
const ::google::protobuf::RepeatedPtrField< ::HTROP_PB::Message_RCRS_ScopInfo >&
Message_RCRS::scoplist() const {
  // @@protoc_insertion_point(field_list:HTROP_PB.Message_RCRS.scopList)
  return scoplist_;
}

// optional string scopFunctionParentName = 2;
bool Message_RCRS::has_scopfunctionparentname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Message_RCRS::set_has_scopfunctionparentname() {
  _has_bits_[0] |= 0x00000002u;
}
void Message_RCRS::clear_has_scopfunctionparentname() {
  _has_bits_[0] &= ~0x00000002u;
}
void Message_RCRS::clear_scopfunctionparentname() {
  scopfunctionparentname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scopfunctionparentname();
}
 const ::std::string& Message_RCRS::scopfunctionparentname() const {
  // @@protoc_insertion_point(field_get:HTROP_PB.Message_RCRS.scopFunctionParentName)
  return scopfunctionparentname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message_RCRS::set_scopfunctionparentname(const ::std::string& value) {
  set_has_scopfunctionparentname();
  scopfunctionparentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HTROP_PB.Message_RCRS.scopFunctionParentName)
}
 void Message_RCRS::set_scopfunctionparentname(const char* value) {
  set_has_scopfunctionparentname();
  scopfunctionparentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HTROP_PB.Message_RCRS.scopFunctionParentName)
}
 void Message_RCRS::set_scopfunctionparentname(const char* value, size_t size) {
  set_has_scopfunctionparentname();
  scopfunctionparentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HTROP_PB.Message_RCRS.scopFunctionParentName)
}
 ::std::string* Message_RCRS::mutable_scopfunctionparentname() {
  set_has_scopfunctionparentname();
  // @@protoc_insertion_point(field_mutable:HTROP_PB.Message_RCRS.scopFunctionParentName)
  return scopfunctionparentname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message_RCRS::release_scopfunctionparentname() {
  // @@protoc_insertion_point(field_release:HTROP_PB.Message_RCRS.scopFunctionParentName)
  clear_has_scopfunctionparentname();
  return scopfunctionparentname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message_RCRS::set_allocated_scopfunctionparentname(::std::string* scopfunctionparentname) {
  if (scopfunctionparentname != NULL) {
    set_has_scopfunctionparentname();
  } else {
    clear_has_scopfunctionparentname();
  }
  scopfunctionparentname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scopfunctionparentname);
  // @@protoc_insertion_point(field_set_allocated:HTROP_PB.Message_RCRS.scopFunctionParentName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message_RSRC_ScopFunctionOCLInfo::kScopFunctionNameFieldNumber;
const int Message_RSRC_ScopFunctionOCLInfo::kScopOCLKernelNameFieldNumber;
const int Message_RSRC_ScopFunctionOCLInfo::kWorkgroupArgIndexFieldNumber;
const int Message_RSRC_ScopFunctionOCLInfo::kWorkgroupArgIndexOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message_RSRC_ScopFunctionOCLInfo::Message_RSRC_ScopFunctionOCLInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo)
}

void Message_RSRC_ScopFunctionOCLInfo::InitAsDefaultInstance() {
}

Message_RSRC_ScopFunctionOCLInfo::Message_RSRC_ScopFunctionOCLInfo(const Message_RSRC_ScopFunctionOCLInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo)
}

void Message_RSRC_ScopFunctionOCLInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  scopfunctionname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scopoclkernelname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_RSRC_ScopFunctionOCLInfo::~Message_RSRC_ScopFunctionOCLInfo() {
  // @@protoc_insertion_point(destructor:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo)
  SharedDtor();
}

void Message_RSRC_ScopFunctionOCLInfo::SharedDtor() {
  scopfunctionname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scopoclkernelname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Message_RSRC_ScopFunctionOCLInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_RSRC_ScopFunctionOCLInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_RSRC_ScopFunctionOCLInfo_descriptor_;
}

const Message_RSRC_ScopFunctionOCLInfo& Message_RSRC_ScopFunctionOCLInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hds_2eproto();
  return *default_instance_;
}

Message_RSRC_ScopFunctionOCLInfo* Message_RSRC_ScopFunctionOCLInfo::default_instance_ = NULL;

Message_RSRC_ScopFunctionOCLInfo* Message_RSRC_ScopFunctionOCLInfo::New(::google::protobuf::Arena* arena) const {
  Message_RSRC_ScopFunctionOCLInfo* n = new Message_RSRC_ScopFunctionOCLInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message_RSRC_ScopFunctionOCLInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_scopfunctionname()) {
      scopfunctionname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_scopoclkernelname()) {
      scopoclkernelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  workgroup_arg_index_.Clear();
  workgroup_arg_index_offset_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Message_RSRC_ScopFunctionOCLInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string scopFunctionName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scopfunctionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scopfunctionname().data(), this->scopfunctionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopFunctionName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_scopOCLKernelName;
        break;
      }

      // optional string scopOCLKernelName = 2;
      case 2: {
        if (tag == 18) {
         parse_scopOCLKernelName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scopoclkernelname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scopoclkernelname().data(), this->scopoclkernelname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopOCLKernelName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_workgroup_arg_index;
        break;
      }

      // repeated int32 workgroup_arg_index = 3;
      case 3: {
        if (tag == 24) {
         parse_workgroup_arg_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_workgroup_arg_index())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_workgroup_arg_index())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_workgroup_arg_index;
        if (input->ExpectTag(32)) goto parse_workgroup_arg_index_offset;
        break;
      }

      // repeated int32 workgroup_arg_index_offset = 4;
      case 4: {
        if (tag == 32) {
         parse_workgroup_arg_index_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_workgroup_arg_index_offset())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_workgroup_arg_index_offset())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_workgroup_arg_index_offset;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo)
  return false;
#undef DO_
}

void Message_RSRC_ScopFunctionOCLInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo)
  // optional string scopFunctionName = 1;
  if (has_scopfunctionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scopfunctionname().data(), this->scopfunctionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopFunctionName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->scopfunctionname(), output);
  }

  // optional string scopOCLKernelName = 2;
  if (has_scopoclkernelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scopoclkernelname().data(), this->scopoclkernelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopOCLKernelName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->scopoclkernelname(), output);
  }

  // repeated int32 workgroup_arg_index = 3;
  for (int i = 0; i < this->workgroup_arg_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->workgroup_arg_index(i), output);
  }

  // repeated int32 workgroup_arg_index_offset = 4;
  for (int i = 0; i < this->workgroup_arg_index_offset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->workgroup_arg_index_offset(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo)
}

::google::protobuf::uint8* Message_RSRC_ScopFunctionOCLInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo)
  // optional string scopFunctionName = 1;
  if (has_scopfunctionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scopfunctionname().data(), this->scopfunctionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopFunctionName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->scopfunctionname(), target);
  }

  // optional string scopOCLKernelName = 2;
  if (has_scopoclkernelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scopoclkernelname().data(), this->scopoclkernelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopOCLKernelName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->scopoclkernelname(), target);
  }

  // repeated int32 workgroup_arg_index = 3;
  for (int i = 0; i < this->workgroup_arg_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->workgroup_arg_index(i), target);
  }

  // repeated int32 workgroup_arg_index_offset = 4;
  for (int i = 0; i < this->workgroup_arg_index_offset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->workgroup_arg_index_offset(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo)
  return target;
}

int Message_RSRC_ScopFunctionOCLInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string scopFunctionName = 1;
    if (has_scopfunctionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scopfunctionname());
    }

    // optional string scopOCLKernelName = 2;
    if (has_scopoclkernelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scopoclkernelname());
    }

  }
  // repeated int32 workgroup_arg_index = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->workgroup_arg_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->workgroup_arg_index(i));
    }
    total_size += 1 * this->workgroup_arg_index_size() + data_size;
  }

  // repeated int32 workgroup_arg_index_offset = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->workgroup_arg_index_offset_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->workgroup_arg_index_offset(i));
    }
    total_size += 1 * this->workgroup_arg_index_offset_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_RSRC_ScopFunctionOCLInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Message_RSRC_ScopFunctionOCLInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Message_RSRC_ScopFunctionOCLInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo)
    MergeFrom(*source);
  }
}

void Message_RSRC_ScopFunctionOCLInfo::MergeFrom(const Message_RSRC_ScopFunctionOCLInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  workgroup_arg_index_.MergeFrom(from.workgroup_arg_index_);
  workgroup_arg_index_offset_.MergeFrom(from.workgroup_arg_index_offset_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scopfunctionname()) {
      set_has_scopfunctionname();
      scopfunctionname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scopfunctionname_);
    }
    if (from.has_scopoclkernelname()) {
      set_has_scopoclkernelname();
      scopoclkernelname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scopoclkernelname_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Message_RSRC_ScopFunctionOCLInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_RSRC_ScopFunctionOCLInfo::CopyFrom(const Message_RSRC_ScopFunctionOCLInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_RSRC_ScopFunctionOCLInfo::IsInitialized() const {

  return true;
}

void Message_RSRC_ScopFunctionOCLInfo::Swap(Message_RSRC_ScopFunctionOCLInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message_RSRC_ScopFunctionOCLInfo::InternalSwap(Message_RSRC_ScopFunctionOCLInfo* other) {
  scopfunctionname_.Swap(&other->scopfunctionname_);
  scopoclkernelname_.Swap(&other->scopoclkernelname_);
  workgroup_arg_index_.UnsafeArenaSwap(&other->workgroup_arg_index_);
  workgroup_arg_index_offset_.UnsafeArenaSwap(&other->workgroup_arg_index_offset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message_RSRC_ScopFunctionOCLInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_RSRC_ScopFunctionOCLInfo_descriptor_;
  metadata.reflection = Message_RSRC_ScopFunctionOCLInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message_RSRC::kScopFunctionsFieldNumber;
const int Message_RSRC::kOclKernelFileNameFieldNumber;
const int Message_RSRC::kBinarySizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message_RSRC::Message_RSRC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HTROP_PB.Message_RSRC)
}

void Message_RSRC::InitAsDefaultInstance() {
}

Message_RSRC::Message_RSRC(const Message_RSRC& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HTROP_PB.Message_RSRC)
}

void Message_RSRC::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  oclkernelfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binarysize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_RSRC::~Message_RSRC() {
  // @@protoc_insertion_point(destructor:HTROP_PB.Message_RSRC)
  SharedDtor();
}

void Message_RSRC::SharedDtor() {
  oclkernelfilename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Message_RSRC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_RSRC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_RSRC_descriptor_;
}

const Message_RSRC& Message_RSRC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hds_2eproto();
  return *default_instance_;
}

Message_RSRC* Message_RSRC::default_instance_ = NULL;

Message_RSRC* Message_RSRC::New(::google::protobuf::Arena* arena) const {
  Message_RSRC* n = new Message_RSRC;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message_RSRC::Clear() {
// @@protoc_insertion_point(message_clear_start:HTROP_PB.Message_RSRC)
  if (_has_bits_[0 / 32] & 6u) {
    if (has_oclkernelfilename()) {
      oclkernelfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    binarysize_ = 0u;
  }
  scopfunctions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Message_RSRC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HTROP_PB.Message_RSRC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HTROP_PB.Message_RSRC.ScopFunctionOCLInfo scopFunctions = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_scopFunctions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_scopfunctions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_scopFunctions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_oclKernelFileName;
        break;
      }

      // optional string oclKernelFileName = 2;
      case 2: {
        if (tag == 18) {
         parse_oclKernelFileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oclkernelfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->oclkernelfilename().data(), this->oclkernelfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HTROP_PB.Message_RSRC.oclKernelFileName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_binarySize;
        break;
      }

      // optional uint32 binarySize = 3;
      case 3: {
        if (tag == 24) {
         parse_binarySize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &binarysize_)));
          set_has_binarysize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HTROP_PB.Message_RSRC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HTROP_PB.Message_RSRC)
  return false;
#undef DO_
}

void Message_RSRC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HTROP_PB.Message_RSRC)
  // repeated .HTROP_PB.Message_RSRC.ScopFunctionOCLInfo scopFunctions = 1;
  for (unsigned int i = 0, n = this->scopfunctions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->scopfunctions(i), output);
  }

  // optional string oclKernelFileName = 2;
  if (has_oclkernelfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oclkernelfilename().data(), this->oclkernelfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HTROP_PB.Message_RSRC.oclKernelFileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->oclkernelfilename(), output);
  }

  // optional uint32 binarySize = 3;
  if (has_binarysize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->binarysize(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HTROP_PB.Message_RSRC)
}

::google::protobuf::uint8* Message_RSRC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HTROP_PB.Message_RSRC)
  // repeated .HTROP_PB.Message_RSRC.ScopFunctionOCLInfo scopFunctions = 1;
  for (unsigned int i = 0, n = this->scopfunctions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->scopfunctions(i), false, target);
  }

  // optional string oclKernelFileName = 2;
  if (has_oclkernelfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oclkernelfilename().data(), this->oclkernelfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HTROP_PB.Message_RSRC.oclKernelFileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->oclkernelfilename(), target);
  }

  // optional uint32 binarySize = 3;
  if (has_binarysize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->binarysize(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HTROP_PB.Message_RSRC)
  return target;
}

int Message_RSRC::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:HTROP_PB.Message_RSRC)
  int total_size = 0;

  if (_has_bits_[1 / 32] & 6u) {
    // optional string oclKernelFileName = 2;
    if (has_oclkernelfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oclkernelfilename());
    }

    // optional uint32 binarySize = 3;
    if (has_binarysize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->binarysize());
    }

  }
  // repeated .HTROP_PB.Message_RSRC.ScopFunctionOCLInfo scopFunctions = 1;
  total_size += 1 * this->scopfunctions_size();
  for (int i = 0; i < this->scopfunctions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scopfunctions(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_RSRC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HTROP_PB.Message_RSRC)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Message_RSRC* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Message_RSRC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HTROP_PB.Message_RSRC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HTROP_PB.Message_RSRC)
    MergeFrom(*source);
  }
}

void Message_RSRC::MergeFrom(const Message_RSRC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HTROP_PB.Message_RSRC)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  scopfunctions_.MergeFrom(from.scopfunctions_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_oclkernelfilename()) {
      set_has_oclkernelfilename();
      oclkernelfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oclkernelfilename_);
    }
    if (from.has_binarysize()) {
      set_binarysize(from.binarysize());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Message_RSRC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HTROP_PB.Message_RSRC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_RSRC::CopyFrom(const Message_RSRC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HTROP_PB.Message_RSRC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_RSRC::IsInitialized() const {

  return true;
}

void Message_RSRC::Swap(Message_RSRC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message_RSRC::InternalSwap(Message_RSRC* other) {
  scopfunctions_.UnsafeArenaSwap(&other->scopfunctions_);
  oclkernelfilename_.Swap(&other->oclkernelfilename_);
  std::swap(binarysize_, other->binarysize_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message_RSRC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_RSRC_descriptor_;
  metadata.reflection = Message_RSRC_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message_RSRC_ScopFunctionOCLInfo

// optional string scopFunctionName = 1;
bool Message_RSRC_ScopFunctionOCLInfo::has_scopfunctionname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Message_RSRC_ScopFunctionOCLInfo::set_has_scopfunctionname() {
  _has_bits_[0] |= 0x00000001u;
}
void Message_RSRC_ScopFunctionOCLInfo::clear_has_scopfunctionname() {
  _has_bits_[0] &= ~0x00000001u;
}
void Message_RSRC_ScopFunctionOCLInfo::clear_scopfunctionname() {
  scopfunctionname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scopfunctionname();
}
 const ::std::string& Message_RSRC_ScopFunctionOCLInfo::scopfunctionname() const {
  // @@protoc_insertion_point(field_get:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopFunctionName)
  return scopfunctionname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message_RSRC_ScopFunctionOCLInfo::set_scopfunctionname(const ::std::string& value) {
  set_has_scopfunctionname();
  scopfunctionname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopFunctionName)
}
 void Message_RSRC_ScopFunctionOCLInfo::set_scopfunctionname(const char* value) {
  set_has_scopfunctionname();
  scopfunctionname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopFunctionName)
}
 void Message_RSRC_ScopFunctionOCLInfo::set_scopfunctionname(const char* value, size_t size) {
  set_has_scopfunctionname();
  scopfunctionname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopFunctionName)
}
 ::std::string* Message_RSRC_ScopFunctionOCLInfo::mutable_scopfunctionname() {
  set_has_scopfunctionname();
  // @@protoc_insertion_point(field_mutable:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopFunctionName)
  return scopfunctionname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message_RSRC_ScopFunctionOCLInfo::release_scopfunctionname() {
  // @@protoc_insertion_point(field_release:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopFunctionName)
  clear_has_scopfunctionname();
  return scopfunctionname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message_RSRC_ScopFunctionOCLInfo::set_allocated_scopfunctionname(::std::string* scopfunctionname) {
  if (scopfunctionname != NULL) {
    set_has_scopfunctionname();
  } else {
    clear_has_scopfunctionname();
  }
  scopfunctionname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scopfunctionname);
  // @@protoc_insertion_point(field_set_allocated:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopFunctionName)
}

// optional string scopOCLKernelName = 2;
bool Message_RSRC_ScopFunctionOCLInfo::has_scopoclkernelname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Message_RSRC_ScopFunctionOCLInfo::set_has_scopoclkernelname() {
  _has_bits_[0] |= 0x00000002u;
}
void Message_RSRC_ScopFunctionOCLInfo::clear_has_scopoclkernelname() {
  _has_bits_[0] &= ~0x00000002u;
}
void Message_RSRC_ScopFunctionOCLInfo::clear_scopoclkernelname() {
  scopoclkernelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scopoclkernelname();
}
 const ::std::string& Message_RSRC_ScopFunctionOCLInfo::scopoclkernelname() const {
  // @@protoc_insertion_point(field_get:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopOCLKernelName)
  return scopoclkernelname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message_RSRC_ScopFunctionOCLInfo::set_scopoclkernelname(const ::std::string& value) {
  set_has_scopoclkernelname();
  scopoclkernelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopOCLKernelName)
}
 void Message_RSRC_ScopFunctionOCLInfo::set_scopoclkernelname(const char* value) {
  set_has_scopoclkernelname();
  scopoclkernelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopOCLKernelName)
}
 void Message_RSRC_ScopFunctionOCLInfo::set_scopoclkernelname(const char* value, size_t size) {
  set_has_scopoclkernelname();
  scopoclkernelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopOCLKernelName)
}
 ::std::string* Message_RSRC_ScopFunctionOCLInfo::mutable_scopoclkernelname() {
  set_has_scopoclkernelname();
  // @@protoc_insertion_point(field_mutable:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopOCLKernelName)
  return scopoclkernelname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message_RSRC_ScopFunctionOCLInfo::release_scopoclkernelname() {
  // @@protoc_insertion_point(field_release:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopOCLKernelName)
  clear_has_scopoclkernelname();
  return scopoclkernelname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message_RSRC_ScopFunctionOCLInfo::set_allocated_scopoclkernelname(::std::string* scopoclkernelname) {
  if (scopoclkernelname != NULL) {
    set_has_scopoclkernelname();
  } else {
    clear_has_scopoclkernelname();
  }
  scopoclkernelname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scopoclkernelname);
  // @@protoc_insertion_point(field_set_allocated:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.scopOCLKernelName)
}

// repeated int32 workgroup_arg_index = 3;
int Message_RSRC_ScopFunctionOCLInfo::workgroup_arg_index_size() const {
  return workgroup_arg_index_.size();
}
void Message_RSRC_ScopFunctionOCLInfo::clear_workgroup_arg_index() {
  workgroup_arg_index_.Clear();
}
 ::google::protobuf::int32 Message_RSRC_ScopFunctionOCLInfo::workgroup_arg_index(int index) const {
  // @@protoc_insertion_point(field_get:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.workgroup_arg_index)
  return workgroup_arg_index_.Get(index);
}
 void Message_RSRC_ScopFunctionOCLInfo::set_workgroup_arg_index(int index, ::google::protobuf::int32 value) {
  workgroup_arg_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.workgroup_arg_index)
}
 void Message_RSRC_ScopFunctionOCLInfo::add_workgroup_arg_index(::google::protobuf::int32 value) {
  workgroup_arg_index_.Add(value);
  // @@protoc_insertion_point(field_add:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.workgroup_arg_index)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Message_RSRC_ScopFunctionOCLInfo::workgroup_arg_index() const {
  // @@protoc_insertion_point(field_list:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.workgroup_arg_index)
  return workgroup_arg_index_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Message_RSRC_ScopFunctionOCLInfo::mutable_workgroup_arg_index() {
  // @@protoc_insertion_point(field_mutable_list:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.workgroup_arg_index)
  return &workgroup_arg_index_;
}

// repeated int32 workgroup_arg_index_offset = 4;
int Message_RSRC_ScopFunctionOCLInfo::workgroup_arg_index_offset_size() const {
  return workgroup_arg_index_offset_.size();
}
void Message_RSRC_ScopFunctionOCLInfo::clear_workgroup_arg_index_offset() {
  workgroup_arg_index_offset_.Clear();
}
 ::google::protobuf::int32 Message_RSRC_ScopFunctionOCLInfo::workgroup_arg_index_offset(int index) const {
  // @@protoc_insertion_point(field_get:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.workgroup_arg_index_offset)
  return workgroup_arg_index_offset_.Get(index);
}
 void Message_RSRC_ScopFunctionOCLInfo::set_workgroup_arg_index_offset(int index, ::google::protobuf::int32 value) {
  workgroup_arg_index_offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.workgroup_arg_index_offset)
}
 void Message_RSRC_ScopFunctionOCLInfo::add_workgroup_arg_index_offset(::google::protobuf::int32 value) {
  workgroup_arg_index_offset_.Add(value);
  // @@protoc_insertion_point(field_add:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.workgroup_arg_index_offset)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Message_RSRC_ScopFunctionOCLInfo::workgroup_arg_index_offset() const {
  // @@protoc_insertion_point(field_list:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.workgroup_arg_index_offset)
  return workgroup_arg_index_offset_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Message_RSRC_ScopFunctionOCLInfo::mutable_workgroup_arg_index_offset() {
  // @@protoc_insertion_point(field_mutable_list:HTROP_PB.Message_RSRC.ScopFunctionOCLInfo.workgroup_arg_index_offset)
  return &workgroup_arg_index_offset_;
}

// -------------------------------------------------------------------

// Message_RSRC

// repeated .HTROP_PB.Message_RSRC.ScopFunctionOCLInfo scopFunctions = 1;
int Message_RSRC::scopfunctions_size() const {
  return scopfunctions_.size();
}
void Message_RSRC::clear_scopfunctions() {
  scopfunctions_.Clear();
}
const ::HTROP_PB::Message_RSRC_ScopFunctionOCLInfo& Message_RSRC::scopfunctions(int index) const {
  // @@protoc_insertion_point(field_get:HTROP_PB.Message_RSRC.scopFunctions)
  return scopfunctions_.Get(index);
}
::HTROP_PB::Message_RSRC_ScopFunctionOCLInfo* Message_RSRC::mutable_scopfunctions(int index) {
  // @@protoc_insertion_point(field_mutable:HTROP_PB.Message_RSRC.scopFunctions)
  return scopfunctions_.Mutable(index);
}
::HTROP_PB::Message_RSRC_ScopFunctionOCLInfo* Message_RSRC::add_scopfunctions() {
  // @@protoc_insertion_point(field_add:HTROP_PB.Message_RSRC.scopFunctions)
  return scopfunctions_.Add();
}
::google::protobuf::RepeatedPtrField< ::HTROP_PB::Message_RSRC_ScopFunctionOCLInfo >*
Message_RSRC::mutable_scopfunctions() {
  // @@protoc_insertion_point(field_mutable_list:HTROP_PB.Message_RSRC.scopFunctions)
  return &scopfunctions_;
}
const ::google::protobuf::RepeatedPtrField< ::HTROP_PB::Message_RSRC_ScopFunctionOCLInfo >&
Message_RSRC::scopfunctions() const {
  // @@protoc_insertion_point(field_list:HTROP_PB.Message_RSRC.scopFunctions)
  return scopfunctions_;
}

// optional string oclKernelFileName = 2;
bool Message_RSRC::has_oclkernelfilename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Message_RSRC::set_has_oclkernelfilename() {
  _has_bits_[0] |= 0x00000002u;
}
void Message_RSRC::clear_has_oclkernelfilename() {
  _has_bits_[0] &= ~0x00000002u;
}
void Message_RSRC::clear_oclkernelfilename() {
  oclkernelfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_oclkernelfilename();
}
 const ::std::string& Message_RSRC::oclkernelfilename() const {
  // @@protoc_insertion_point(field_get:HTROP_PB.Message_RSRC.oclKernelFileName)
  return oclkernelfilename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message_RSRC::set_oclkernelfilename(const ::std::string& value) {
  set_has_oclkernelfilename();
  oclkernelfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HTROP_PB.Message_RSRC.oclKernelFileName)
}
 void Message_RSRC::set_oclkernelfilename(const char* value) {
  set_has_oclkernelfilename();
  oclkernelfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HTROP_PB.Message_RSRC.oclKernelFileName)
}
 void Message_RSRC::set_oclkernelfilename(const char* value, size_t size) {
  set_has_oclkernelfilename();
  oclkernelfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HTROP_PB.Message_RSRC.oclKernelFileName)
}
 ::std::string* Message_RSRC::mutable_oclkernelfilename() {
  set_has_oclkernelfilename();
  // @@protoc_insertion_point(field_mutable:HTROP_PB.Message_RSRC.oclKernelFileName)
  return oclkernelfilename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message_RSRC::release_oclkernelfilename() {
  // @@protoc_insertion_point(field_release:HTROP_PB.Message_RSRC.oclKernelFileName)
  clear_has_oclkernelfilename();
  return oclkernelfilename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message_RSRC::set_allocated_oclkernelfilename(::std::string* oclkernelfilename) {
  if (oclkernelfilename != NULL) {
    set_has_oclkernelfilename();
  } else {
    clear_has_oclkernelfilename();
  }
  oclkernelfilename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oclkernelfilename);
  // @@protoc_insertion_point(field_set_allocated:HTROP_PB.Message_RSRC.oclKernelFileName)
}

// optional uint32 binarySize = 3;
bool Message_RSRC::has_binarysize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Message_RSRC::set_has_binarysize() {
  _has_bits_[0] |= 0x00000004u;
}
void Message_RSRC::clear_has_binarysize() {
  _has_bits_[0] &= ~0x00000004u;
}
void Message_RSRC::clear_binarysize() {
  binarysize_ = 0u;
  clear_has_binarysize();
}
 ::google::protobuf::uint32 Message_RSRC::binarysize() const {
  // @@protoc_insertion_point(field_get:HTROP_PB.Message_RSRC.binarySize)
  return binarysize_;
}
 void Message_RSRC::set_binarysize(::google::protobuf::uint32 value) {
  set_has_binarysize();
  binarysize_ = value;
  // @@protoc_insertion_point(field_set:HTROP_PB.Message_RSRC.binarySize)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace HTROP_PB

// @@protoc_insertion_point(global_scope)
